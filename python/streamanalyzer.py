# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_streamanalyzer', [dirname(__file__)])
        except ImportError:
            import _streamanalyzer
            return _streamanalyzer
        if fp is not None:
            try:
                _mod = imp.load_module('_streamanalyzer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _streamanalyzer = swig_import_helper()
    del swig_import_helper
else:
    import _streamanalyzer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _streamanalyzer.SwigPyIterator_value(self)
    def incr(self, n = 1): return _streamanalyzer.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _streamanalyzer.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _streamanalyzer.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _streamanalyzer.SwigPyIterator_equal(self, *args)
    def copy(self): return _streamanalyzer.SwigPyIterator_copy(self)
    def next(self): return _streamanalyzer.SwigPyIterator_next(self)
    def __next__(self): return _streamanalyzer.SwigPyIterator___next__(self)
    def previous(self): return _streamanalyzer.SwigPyIterator_previous(self)
    def advance(self, *args): return _streamanalyzer.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _streamanalyzer.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _streamanalyzer.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _streamanalyzer.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _streamanalyzer.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _streamanalyzer.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _streamanalyzer.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _streamanalyzer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr
    def iterator(self): return _streamanalyzer.StringList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _streamanalyzer.StringList___nonzero__(self)
    def __bool__(self): return _streamanalyzer.StringList___bool__(self)
    def __len__(self): return _streamanalyzer.StringList___len__(self)
    def pop(self): return _streamanalyzer.StringList_pop(self)
    def __getslice__(self, *args): return _streamanalyzer.StringList___getslice__(self, *args)
    def __setslice__(self, *args): return _streamanalyzer.StringList___setslice__(self, *args)
    def __delslice__(self, *args): return _streamanalyzer.StringList___delslice__(self, *args)
    def __delitem__(self, *args): return _streamanalyzer.StringList___delitem__(self, *args)
    def __getitem__(self, *args): return _streamanalyzer.StringList___getitem__(self, *args)
    def __setitem__(self, *args): return _streamanalyzer.StringList___setitem__(self, *args)
    def append(self, *args): return _streamanalyzer.StringList_append(self, *args)
    def empty(self): return _streamanalyzer.StringList_empty(self)
    def size(self): return _streamanalyzer.StringList_size(self)
    def clear(self): return _streamanalyzer.StringList_clear(self)
    def swap(self, *args): return _streamanalyzer.StringList_swap(self, *args)
    def get_allocator(self): return _streamanalyzer.StringList_get_allocator(self)
    def begin(self): return _streamanalyzer.StringList_begin(self)
    def end(self): return _streamanalyzer.StringList_end(self)
    def rbegin(self): return _streamanalyzer.StringList_rbegin(self)
    def rend(self): return _streamanalyzer.StringList_rend(self)
    def pop_back(self): return _streamanalyzer.StringList_pop_back(self)
    def erase(self, *args): return _streamanalyzer.StringList_erase(self, *args)
    def __init__(self, *args): 
        this = _streamanalyzer.new_StringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _streamanalyzer.StringList_push_back(self, *args)
    def front(self): return _streamanalyzer.StringList_front(self)
    def back(self): return _streamanalyzer.StringList_back(self)
    def assign(self, *args): return _streamanalyzer.StringList_assign(self, *args)
    def resize(self, *args): return _streamanalyzer.StringList_resize(self, *args)
    def insert(self, *args): return _streamanalyzer.StringList_insert(self, *args)
    def reserve(self, *args): return _streamanalyzer.StringList_reserve(self, *args)
    def capacity(self): return _streamanalyzer.StringList_capacity(self)
    __swig_destroy__ = _streamanalyzer.delete_StringList
    __del__ = lambda self : None;
StringList_swigregister = _streamanalyzer.StringList_swigregister
StringList_swigregister(StringList)

INT32MAX = _streamanalyzer.INT32MAX
Ok = _streamanalyzer.Ok
Eof = _streamanalyzer.Eof
Error = _streamanalyzer.Error
class StreamsBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamsBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamsBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _streamanalyzer.new_StreamsBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamsBase
    __del__ = lambda self : None;
    def error(self): return _streamanalyzer.StreamsBase_error(self)
    def status(self): return _streamanalyzer.StreamsBase_status(self)
    def position(self): return _streamanalyzer.StreamsBase_position(self)
    def size(self): return _streamanalyzer.StreamsBase_size(self)
StreamsBase_swigregister = _streamanalyzer.StreamsBase_swigregister
StreamsBase_swigregister(StreamsBase)

class InputStream(StreamsBase):
    __swig_setmethods__ = {}
    for _s in [StreamsBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamsBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_InputStream
    __del__ = lambda self : None;
    def read(self, *args): return _streamanalyzer.InputStream_read(self, *args)
    def skip(self, *args): return _streamanalyzer.InputStream_skip(self, *args)
    def reset(self, *args): return _streamanalyzer.InputStream_reset(self, *args)
InputStream_swigregister = _streamanalyzer.InputStream_swigregister
InputStream_swigregister(InputStream)

class Reader(StreamsBase):
    __swig_setmethods__ = {}
    for _s in [StreamsBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reader, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamsBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_Reader
    __del__ = lambda self : None;
    def read(self, *args): return _streamanalyzer.Reader_read(self, *args)
    def skip(self, *args): return _streamanalyzer.Reader_skip(self, *args)
    def reset(self, *args): return _streamanalyzer.Reader_reset(self, *args)
Reader_swigregister = _streamanalyzer.Reader_swigregister
Reader_swigregister(Reader)

class FieldProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldProperties, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_FieldProperties
    __del__ = lambda self : None;
    def valid(self): return _streamanalyzer.FieldProperties_valid(self)
    def binary(self): return _streamanalyzer.FieldProperties_binary(self)
    def compressed(self): return _streamanalyzer.FieldProperties_compressed(self)
    def indexed(self): return _streamanalyzer.FieldProperties_indexed(self)
    def stored(self): return _streamanalyzer.FieldProperties_stored(self)
    def tokenized(self): return _streamanalyzer.FieldProperties_tokenized(self)
    def minCardinality(self): return _streamanalyzer.FieldProperties_minCardinality(self)
    def maxCardinality(self): return _streamanalyzer.FieldProperties_maxCardinality(self)
    def uri(self): return _streamanalyzer.FieldProperties_uri(self)
    def name(self): return _streamanalyzer.FieldProperties_name(self)
    def typeUri(self): return _streamanalyzer.FieldProperties_typeUri(self)
    def description(self): return _streamanalyzer.FieldProperties_description(self)
    def parentUris(self): return _streamanalyzer.FieldProperties_parentUris(self)
    def childUris(self): return _streamanalyzer.FieldProperties_childUris(self)
    def applicableClasses(self): return _streamanalyzer.FieldProperties_applicableClasses(self)
FieldProperties_swigregister = _streamanalyzer.FieldProperties_swigregister
FieldProperties_swigregister(FieldProperties)

class RegisteredField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisteredField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisteredField, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def key(self): return _streamanalyzer.RegisteredField_key(self)
    def parent(self): return _streamanalyzer.RegisteredField_parent(self)
    def properties(self): return _streamanalyzer.RegisteredField_properties(self)
    def type(self): return _streamanalyzer.RegisteredField_type(self)
    __swig_destroy__ = _streamanalyzer.delete_RegisteredField
    __del__ = lambda self : None;
RegisteredField_swigregister = _streamanalyzer.RegisteredField_swigregister
RegisteredField_swigregister(RegisteredField)

class RegisteredFieldVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisteredFieldVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisteredFieldVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _streamanalyzer.RegisteredFieldVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _streamanalyzer.RegisteredFieldVector___nonzero__(self)
    def __bool__(self): return _streamanalyzer.RegisteredFieldVector___bool__(self)
    def __len__(self): return _streamanalyzer.RegisteredFieldVector___len__(self)
    def pop(self): return _streamanalyzer.RegisteredFieldVector_pop(self)
    def __getslice__(self, *args): return _streamanalyzer.RegisteredFieldVector___getslice__(self, *args)
    def __setslice__(self, *args): return _streamanalyzer.RegisteredFieldVector___setslice__(self, *args)
    def __delslice__(self, *args): return _streamanalyzer.RegisteredFieldVector___delslice__(self, *args)
    def __delitem__(self, *args): return _streamanalyzer.RegisteredFieldVector___delitem__(self, *args)
    def __getitem__(self, *args): return _streamanalyzer.RegisteredFieldVector___getitem__(self, *args)
    def __setitem__(self, *args): return _streamanalyzer.RegisteredFieldVector___setitem__(self, *args)
    def append(self, *args): return _streamanalyzer.RegisteredFieldVector_append(self, *args)
    def empty(self): return _streamanalyzer.RegisteredFieldVector_empty(self)
    def size(self): return _streamanalyzer.RegisteredFieldVector_size(self)
    def clear(self): return _streamanalyzer.RegisteredFieldVector_clear(self)
    def swap(self, *args): return _streamanalyzer.RegisteredFieldVector_swap(self, *args)
    def get_allocator(self): return _streamanalyzer.RegisteredFieldVector_get_allocator(self)
    def begin(self): return _streamanalyzer.RegisteredFieldVector_begin(self)
    def end(self): return _streamanalyzer.RegisteredFieldVector_end(self)
    def rbegin(self): return _streamanalyzer.RegisteredFieldVector_rbegin(self)
    def rend(self): return _streamanalyzer.RegisteredFieldVector_rend(self)
    def pop_back(self): return _streamanalyzer.RegisteredFieldVector_pop_back(self)
    def erase(self, *args): return _streamanalyzer.RegisteredFieldVector_erase(self, *args)
    def __init__(self, *args): 
        this = _streamanalyzer.new_RegisteredFieldVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _streamanalyzer.RegisteredFieldVector_push_back(self, *args)
    def front(self): return _streamanalyzer.RegisteredFieldVector_front(self)
    def back(self): return _streamanalyzer.RegisteredFieldVector_back(self)
    def assign(self, *args): return _streamanalyzer.RegisteredFieldVector_assign(self, *args)
    def resize(self, *args): return _streamanalyzer.RegisteredFieldVector_resize(self, *args)
    def insert(self, *args): return _streamanalyzer.RegisteredFieldVector_insert(self, *args)
    def reserve(self, *args): return _streamanalyzer.RegisteredFieldVector_reserve(self, *args)
    def capacity(self): return _streamanalyzer.RegisteredFieldVector_capacity(self)
    __swig_destroy__ = _streamanalyzer.delete_RegisteredFieldVector
    __del__ = lambda self : None;
RegisteredFieldVector_swigregister = _streamanalyzer.RegisteredFieldVector_swigregister
RegisteredFieldVector_swigregister(RegisteredFieldVector)

class StreamAnalyzerFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAnalyzerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamAnalyzerFactory
    __del__ = lambda self : None;
    def name(self): return _streamanalyzer.StreamAnalyzerFactory_name(self)
    def registeredFields(self): return _streamanalyzer.StreamAnalyzerFactory_registeredFields(self)
StreamAnalyzerFactory_swigregister = _streamanalyzer.StreamAnalyzerFactory_swigregister
StreamAnalyzerFactory_swigregister(StreamAnalyzerFactory)

class StreamEndAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamEndAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamEndAnalyzerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def analyzesSubStreams(self): return _streamanalyzer.StreamEndAnalyzerFactory_analyzesSubStreams(self)
    __swig_destroy__ = _streamanalyzer.delete_StreamEndAnalyzerFactory
    __del__ = lambda self : None;
StreamEndAnalyzerFactory_swigregister = _streamanalyzer.StreamEndAnalyzerFactory_swigregister
StreamEndAnalyzerFactory_swigregister(StreamEndAnalyzerFactory)

class StreamEventAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamEventAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamEventAnalyzerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamEventAnalyzerFactory
    __del__ = lambda self : None;
StreamEventAnalyzerFactory_swigregister = _streamanalyzer.StreamEventAnalyzerFactory_swigregister
StreamEventAnalyzerFactory_swigregister(StreamEventAnalyzerFactory)

class StreamLineAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamLineAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamLineAnalyzerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamLineAnalyzerFactory
    __del__ = lambda self : None;
StreamLineAnalyzerFactory_swigregister = _streamanalyzer.StreamLineAnalyzerFactory_swigregister
StreamLineAnalyzerFactory_swigregister(StreamLineAnalyzerFactory)

class StreamSaxAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamSaxAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamSaxAnalyzerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamSaxAnalyzerFactory
    __del__ = lambda self : None;
StreamSaxAnalyzerFactory_swigregister = _streamanalyzer.StreamSaxAnalyzerFactory_swigregister
StreamSaxAnalyzerFactory_swigregister(StreamSaxAnalyzerFactory)

class StreamThroughAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamThroughAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamThroughAnalyzerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamThroughAnalyzerFactory
    __del__ = lambda self : None;
StreamThroughAnalyzerFactory_swigregister = _streamanalyzer.StreamThroughAnalyzerFactory_swigregister
StreamThroughAnalyzerFactory_swigregister(StreamThroughAnalyzerFactory)

class AnalysisResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisResult, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_AnalysisResult
    __del__ = lambda self : None;
    def child(self): return _streamanalyzer.AnalysisResult_child(self)
    def fileName(self): return _streamanalyzer.AnalysisResult_fileName(self)
    def path(self): return _streamanalyzer.AnalysisResult_path(self)
    def parentPath(self): return _streamanalyzer.AnalysisResult_parentPath(self)
    def mTime(self): return _streamanalyzer.AnalysisResult_mTime(self)
    def depth(self): return _streamanalyzer.AnalysisResult_depth(self)
    def encoding(self): return _streamanalyzer.AnalysisResult_encoding(self)
    def mimeType(self): return _streamanalyzer.AnalysisResult_mimeType(self)
    def extension(self): return _streamanalyzer.AnalysisResult_extension(self)
    def config(self): return _streamanalyzer.AnalysisResult_config(self)
AnalysisResult_swigregister = _streamanalyzer.AnalysisResult_swigregister
AnalysisResult_swigregister(AnalysisResult)

class AnalyzerConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyzerConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyzerConfiguration, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == AnalyzerConfiguration:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_AnalyzerConfiguration(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_AnalyzerConfiguration
    __del__ = lambda self : None;
    def indexFile(self, *args): return _streamanalyzer.AnalyzerConfiguration_indexFile(self, *args)
    def indexDir(self, *args): return _streamanalyzer.AnalyzerConfiguration_indexDir(self, *args)
    def useFactory(self, *args): return _streamanalyzer.AnalyzerConfiguration_useFactory(self, *args)
    def indexMore(self): return _streamanalyzer.AnalyzerConfiguration_indexMore(self)
    def indexArchiveContents(self): return _streamanalyzer.AnalyzerConfiguration_indexArchiveContents(self)
    def addMoreText(self): return _streamanalyzer.AnalyzerConfiguration_addMoreText(self)
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_AnalyzerConfiguration(self)
        return weakref_proxy(self)
AnalyzerConfiguration_swigregister = _streamanalyzer.AnalyzerConfiguration_swigregister
AnalyzerConfiguration_swigregister(AnalyzerConfiguration)

class IndexWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexWriter, name)
    __repr__ = _swig_repr
    def startAnalysis(self, *args): return _streamanalyzer.IndexWriter_startAnalysis(self, *args)
    def finishAnalysis(self, *args): return _streamanalyzer.IndexWriter_finishAnalysis(self, *args)
    def addTriplet(self, *args): return _streamanalyzer.IndexWriter_addTriplet(self, *args)
    def addText(self, *args): return _streamanalyzer.IndexWriter_addText(self, *args)
    def addValue(self, *args): return _streamanalyzer.IndexWriter_addValue(self, *args)
    __swig_destroy__ = _streamanalyzer.delete_IndexWriter
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == IndexWriter:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_IndexWriter(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_IndexWriter(self)
        return weakref_proxy(self)
IndexWriter_swigregister = _streamanalyzer.IndexWriter_swigregister
IndexWriter_swigregister(IndexWriter)

class PythonIndexManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonIndexManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PythonIndexManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == PythonIndexManager:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_PythonIndexManager(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_PythonIndexManager
    __del__ = lambda self : None;
    def pythonIndexWriter(self): return _streamanalyzer.PythonIndexManager_pythonIndexWriter(self)
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_PythonIndexManager(self)
        return weakref_proxy(self)
PythonIndexManager_swigregister = _streamanalyzer.PythonIndexManager_swigregister
PythonIndexManager_swigregister(PythonIndexManager)

class DirAnalyzer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirAnalyzer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _streamanalyzer.new_DirAnalyzer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_DirAnalyzer
    __del__ = lambda self : None;
    def analyzeDir(self, *args): return _streamanalyzer.DirAnalyzer_analyzeDir(self, *args)
    def stop(self): return _streamanalyzer.DirAnalyzer_stop(self)
    _traps = []
    @staticmethod
    def _handleSignal(*args):
      for t in DirAnalyzer._traps:
        t.stop()
    def installSignal(self):
      import signal
      signal.signal(signal.SIGINT, DirAnalyzer._handleSignal)
      if not self in DirAnalyzer._traps:
        DirAnalyzer._traps.append(weakref.ref(self))
    def uninstallSignal(self):
      if self in DirAnalyzer._traps:
        DirAnalyzer._traps.remove(self)
    def __del__(self):
      self.uninstallSignal()

DirAnalyzer_swigregister = _streamanalyzer.DirAnalyzer_swigregister
DirAnalyzer_swigregister(DirAnalyzer)

import threading

class IndexManager(PythonIndexManager):
  def __init__(self):
    super(IndexManager, self).__init__()
    self.tls = threading.local()
  
  """ Returns an IndexWriter. Note that there are multiple IndexWriters depending on the thread which is requesting it"""
  def indexWriter(self):
    return self.pythonIndexWriter()

  """ Since IndexWriters are not thread safe, we keep and return a thread specific IndexWriter"""
  def pythonIndexWriter(self):
    if not 'writer' in self.tls.__dict__:
      self.tls.writer = self.createIndexWriter()
    return self.tls.writer




