# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_streamanalyzer', [dirname(__file__)])
        except ImportError:
            import _streamanalyzer
            return _streamanalyzer
        if fp is not None:
            try:
                _mod = imp.load_module('_streamanalyzer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _streamanalyzer = swig_import_helper()
    del swig_import_helper
else:
    import _streamanalyzer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _streamanalyzer.SwigPyIterator_value(self)
    def incr(self, n = 1): return _streamanalyzer.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _streamanalyzer.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _streamanalyzer.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _streamanalyzer.SwigPyIterator_equal(self, *args)
    def copy(self): return _streamanalyzer.SwigPyIterator_copy(self)
    def next(self): return _streamanalyzer.SwigPyIterator_next(self)
    def __next__(self): return _streamanalyzer.SwigPyIterator___next__(self)
    def previous(self): return _streamanalyzer.SwigPyIterator_previous(self)
    def advance(self, *args): return _streamanalyzer.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _streamanalyzer.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _streamanalyzer.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _streamanalyzer.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _streamanalyzer.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _streamanalyzer.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _streamanalyzer.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _streamanalyzer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr
    def iterator(self): return _streamanalyzer.StringList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _streamanalyzer.StringList___nonzero__(self)
    def __bool__(self): return _streamanalyzer.StringList___bool__(self)
    def __len__(self): return _streamanalyzer.StringList___len__(self)
    def pop(self): return _streamanalyzer.StringList_pop(self)
    def __getslice__(self, *args): return _streamanalyzer.StringList___getslice__(self, *args)
    def __setslice__(self, *args): return _streamanalyzer.StringList___setslice__(self, *args)
    def __delslice__(self, *args): return _streamanalyzer.StringList___delslice__(self, *args)
    def __delitem__(self, *args): return _streamanalyzer.StringList___delitem__(self, *args)
    def __getitem__(self, *args): return _streamanalyzer.StringList___getitem__(self, *args)
    def __setitem__(self, *args): return _streamanalyzer.StringList___setitem__(self, *args)
    def append(self, *args): return _streamanalyzer.StringList_append(self, *args)
    def empty(self): return _streamanalyzer.StringList_empty(self)
    def size(self): return _streamanalyzer.StringList_size(self)
    def clear(self): return _streamanalyzer.StringList_clear(self)
    def swap(self, *args): return _streamanalyzer.StringList_swap(self, *args)
    def get_allocator(self): return _streamanalyzer.StringList_get_allocator(self)
    def begin(self): return _streamanalyzer.StringList_begin(self)
    def end(self): return _streamanalyzer.StringList_end(self)
    def rbegin(self): return _streamanalyzer.StringList_rbegin(self)
    def rend(self): return _streamanalyzer.StringList_rend(self)
    def pop_back(self): return _streamanalyzer.StringList_pop_back(self)
    def erase(self, *args): return _streamanalyzer.StringList_erase(self, *args)
    def __init__(self, *args): 
        this = _streamanalyzer.new_StringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _streamanalyzer.StringList_push_back(self, *args)
    def front(self): return _streamanalyzer.StringList_front(self)
    def back(self): return _streamanalyzer.StringList_back(self)
    def assign(self, *args): return _streamanalyzer.StringList_assign(self, *args)
    def resize(self, *args): return _streamanalyzer.StringList_resize(self, *args)
    def insert(self, *args): return _streamanalyzer.StringList_insert(self, *args)
    def reserve(self, *args): return _streamanalyzer.StringList_reserve(self, *args)
    def capacity(self): return _streamanalyzer.StringList_capacity(self)
    __swig_destroy__ = _streamanalyzer.delete_StringList
    __del__ = lambda self : None;
StringList_swigregister = _streamanalyzer.StringList_swigregister
StringList_swigregister(StringList)

INT32MAX = _streamanalyzer.INT32MAX
Ok = _streamanalyzer.Ok
Eof = _streamanalyzer.Eof
Error = _streamanalyzer.Error
class StreamsBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamsBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamsBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _streamanalyzer.new_StreamsBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamsBase
    __del__ = lambda self : None;
    def error(self): return _streamanalyzer.StreamsBase_error(self)
    def status(self): return _streamanalyzer.StreamsBase_status(self)
    def position(self): return _streamanalyzer.StreamsBase_position(self)
    def size(self): return _streamanalyzer.StreamsBase_size(self)
StreamsBase_swigregister = _streamanalyzer.StreamsBase_swigregister
StreamsBase_swigregister(StreamsBase)

class InputStream(StreamsBase):
    __swig_setmethods__ = {}
    for _s in [StreamsBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamsBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_InputStream
    __del__ = lambda self : None;
    def skip(self, *args): return _streamanalyzer.InputStream_skip(self, *args)
    def reset(self, *args): return _streamanalyzer.InputStream_reset(self, *args)
    __swig_getmethods__["openFile"] = lambda x: _streamanalyzer.InputStream_openFile
    if _newclass:openFile = staticmethod(_streamanalyzer.InputStream_openFile)
    def read(self, *args): return _streamanalyzer.InputStream_read(self, *args)
InputStream_swigregister = _streamanalyzer.InputStream_swigregister
InputStream_swigregister(InputStream)

def InputStream_openFile(*args):
  return _streamanalyzer.InputStream_openFile(*args)
InputStream_openFile = _streamanalyzer.InputStream_openFile

class Reader(StreamsBase):
    __swig_setmethods__ = {}
    for _s in [StreamsBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reader, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamsBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_Reader
    __del__ = lambda self : None;
    def skip(self, *args): return _streamanalyzer.Reader_skip(self, *args)
    def reset(self, *args): return _streamanalyzer.Reader_reset(self, *args)
Reader_swigregister = _streamanalyzer.Reader_swigregister
Reader_swigregister(Reader)

class FieldProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldProperties, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_FieldProperties
    __del__ = lambda self : None;
    def valid(self): return _streamanalyzer.FieldProperties_valid(self)
    def binary(self): return _streamanalyzer.FieldProperties_binary(self)
    def compressed(self): return _streamanalyzer.FieldProperties_compressed(self)
    def indexed(self): return _streamanalyzer.FieldProperties_indexed(self)
    def stored(self): return _streamanalyzer.FieldProperties_stored(self)
    def tokenized(self): return _streamanalyzer.FieldProperties_tokenized(self)
    def minCardinality(self): return _streamanalyzer.FieldProperties_minCardinality(self)
    def maxCardinality(self): return _streamanalyzer.FieldProperties_maxCardinality(self)
    def uri(self): return _streamanalyzer.FieldProperties_uri(self)
    def name(self): return _streamanalyzer.FieldProperties_name(self)
    def typeUri(self): return _streamanalyzer.FieldProperties_typeUri(self)
    def description(self): return _streamanalyzer.FieldProperties_description(self)
    def parentUris(self): return _streamanalyzer.FieldProperties_parentUris(self)
    def childUris(self): return _streamanalyzer.FieldProperties_childUris(self)
    def applicableClasses(self): return _streamanalyzer.FieldProperties_applicableClasses(self)
FieldProperties_swigregister = _streamanalyzer.FieldProperties_swigregister
FieldProperties_swigregister(FieldProperties)

class RegisteredField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisteredField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisteredField, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def key(self): return _streamanalyzer.RegisteredField_key(self)
    def parent(self): return _streamanalyzer.RegisteredField_parent(self)
    def properties(self): return _streamanalyzer.RegisteredField_properties(self)
    def type(self): return _streamanalyzer.RegisteredField_type(self)
    __swig_destroy__ = _streamanalyzer.delete_RegisteredField
    __del__ = lambda self : None;
RegisteredField_swigregister = _streamanalyzer.RegisteredField_swigregister
RegisteredField_swigregister(RegisteredField)

class FieldRegister(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldRegister, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _streamanalyzer.new_FieldRegister()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_FieldRegister
    __del__ = lambda self : None;
    def registerField(self, *args): return _streamanalyzer.FieldRegister_registerField(self, *args)
    __swig_setmethods__["pathField"] = _streamanalyzer.FieldRegister_pathField_set
    __swig_getmethods__["pathField"] = _streamanalyzer.FieldRegister_pathField_get
    if _newclass:pathField = _swig_property(_streamanalyzer.FieldRegister_pathField_get, _streamanalyzer.FieldRegister_pathField_set)
    __swig_setmethods__["parentLocationField"] = _streamanalyzer.FieldRegister_parentLocationField_set
    __swig_getmethods__["parentLocationField"] = _streamanalyzer.FieldRegister_parentLocationField_get
    if _newclass:parentLocationField = _swig_property(_streamanalyzer.FieldRegister_parentLocationField_get, _streamanalyzer.FieldRegister_parentLocationField_set)
    __swig_setmethods__["encodingField"] = _streamanalyzer.FieldRegister_encodingField_set
    __swig_getmethods__["encodingField"] = _streamanalyzer.FieldRegister_encodingField_get
    if _newclass:encodingField = _swig_property(_streamanalyzer.FieldRegister_encodingField_get, _streamanalyzer.FieldRegister_encodingField_set)
    __swig_setmethods__["mimetypeField"] = _streamanalyzer.FieldRegister_mimetypeField_set
    __swig_getmethods__["mimetypeField"] = _streamanalyzer.FieldRegister_mimetypeField_get
    if _newclass:mimetypeField = _swig_property(_streamanalyzer.FieldRegister_mimetypeField_get, _streamanalyzer.FieldRegister_mimetypeField_set)
    __swig_setmethods__["filenameField"] = _streamanalyzer.FieldRegister_filenameField_set
    __swig_getmethods__["filenameField"] = _streamanalyzer.FieldRegister_filenameField_get
    if _newclass:filenameField = _swig_property(_streamanalyzer.FieldRegister_filenameField_get, _streamanalyzer.FieldRegister_filenameField_set)
    __swig_setmethods__["extensionField"] = _streamanalyzer.FieldRegister_extensionField_set
    __swig_getmethods__["extensionField"] = _streamanalyzer.FieldRegister_extensionField_get
    if _newclass:extensionField = _swig_property(_streamanalyzer.FieldRegister_extensionField_get, _streamanalyzer.FieldRegister_extensionField_set)
    __swig_setmethods__["embeddepthField"] = _streamanalyzer.FieldRegister_embeddepthField_set
    __swig_getmethods__["embeddepthField"] = _streamanalyzer.FieldRegister_embeddepthField_get
    if _newclass:embeddepthField = _swig_property(_streamanalyzer.FieldRegister_embeddepthField_get, _streamanalyzer.FieldRegister_embeddepthField_set)
    __swig_setmethods__["mtimeField"] = _streamanalyzer.FieldRegister_mtimeField_set
    __swig_getmethods__["mtimeField"] = _streamanalyzer.FieldRegister_mtimeField_get
    if _newclass:mtimeField = _swig_property(_streamanalyzer.FieldRegister_mtimeField_get, _streamanalyzer.FieldRegister_mtimeField_set)
    __swig_setmethods__["sizeField"] = _streamanalyzer.FieldRegister_sizeField_set
    __swig_getmethods__["sizeField"] = _streamanalyzer.FieldRegister_sizeField_get
    if _newclass:sizeField = _swig_property(_streamanalyzer.FieldRegister_sizeField_get, _streamanalyzer.FieldRegister_sizeField_set)
    __swig_setmethods__["typeField"] = _streamanalyzer.FieldRegister_typeField_set
    __swig_getmethods__["typeField"] = _streamanalyzer.FieldRegister_typeField_get
    if _newclass:typeField = _swig_property(_streamanalyzer.FieldRegister_typeField_get, _streamanalyzer.FieldRegister_typeField_set)
    __swig_setmethods__["parseErrorField"] = _streamanalyzer.FieldRegister_parseErrorField_set
    __swig_getmethods__["parseErrorField"] = _streamanalyzer.FieldRegister_parseErrorField_get
    if _newclass:parseErrorField = _swig_property(_streamanalyzer.FieldRegister_parseErrorField_get, _streamanalyzer.FieldRegister_parseErrorField_set)
FieldRegister_swigregister = _streamanalyzer.FieldRegister_swigregister
FieldRegister_swigregister(FieldRegister)
cvar = _streamanalyzer.cvar
FieldRegister.floatType = _streamanalyzer.cvar.FieldRegister_floatType
FieldRegister.integerType = _streamanalyzer.cvar.FieldRegister_integerType
FieldRegister.binaryType = _streamanalyzer.cvar.FieldRegister_binaryType
FieldRegister.stringType = _streamanalyzer.cvar.FieldRegister_stringType
FieldRegister.datetimeType = _streamanalyzer.cvar.FieldRegister_datetimeType
FieldRegister.pathFieldName = _streamanalyzer.cvar.FieldRegister_pathFieldName
FieldRegister.parentLocationFieldName = _streamanalyzer.cvar.FieldRegister_parentLocationFieldName
FieldRegister.encodingFieldName = _streamanalyzer.cvar.FieldRegister_encodingFieldName
FieldRegister.mimetypeFieldName = _streamanalyzer.cvar.FieldRegister_mimetypeFieldName
FieldRegister.filenameFieldName = _streamanalyzer.cvar.FieldRegister_filenameFieldName
FieldRegister.contentFieldName = _streamanalyzer.cvar.FieldRegister_contentFieldName
FieldRegister.extensionFieldName = _streamanalyzer.cvar.FieldRegister_extensionFieldName
FieldRegister.embeddepthFieldName = _streamanalyzer.cvar.FieldRegister_embeddepthFieldName
FieldRegister.mtimeFieldName = _streamanalyzer.cvar.FieldRegister_mtimeFieldName
FieldRegister.sizeFieldName = _streamanalyzer.cvar.FieldRegister_sizeFieldName
FieldRegister.typeFieldName = _streamanalyzer.cvar.FieldRegister_typeFieldName
FieldRegister.defaultNamespace = _streamanalyzer.cvar.FieldRegister_defaultNamespace

class RegisteredFieldVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisteredFieldVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisteredFieldVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _streamanalyzer.RegisteredFieldVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _streamanalyzer.RegisteredFieldVector___nonzero__(self)
    def __bool__(self): return _streamanalyzer.RegisteredFieldVector___bool__(self)
    def __len__(self): return _streamanalyzer.RegisteredFieldVector___len__(self)
    def pop(self): return _streamanalyzer.RegisteredFieldVector_pop(self)
    def __getslice__(self, *args): return _streamanalyzer.RegisteredFieldVector___getslice__(self, *args)
    def __setslice__(self, *args): return _streamanalyzer.RegisteredFieldVector___setslice__(self, *args)
    def __delslice__(self, *args): return _streamanalyzer.RegisteredFieldVector___delslice__(self, *args)
    def __delitem__(self, *args): return _streamanalyzer.RegisteredFieldVector___delitem__(self, *args)
    def __getitem__(self, *args): return _streamanalyzer.RegisteredFieldVector___getitem__(self, *args)
    def __setitem__(self, *args): return _streamanalyzer.RegisteredFieldVector___setitem__(self, *args)
    def append(self, *args): return _streamanalyzer.RegisteredFieldVector_append(self, *args)
    def empty(self): return _streamanalyzer.RegisteredFieldVector_empty(self)
    def size(self): return _streamanalyzer.RegisteredFieldVector_size(self)
    def clear(self): return _streamanalyzer.RegisteredFieldVector_clear(self)
    def swap(self, *args): return _streamanalyzer.RegisteredFieldVector_swap(self, *args)
    def get_allocator(self): return _streamanalyzer.RegisteredFieldVector_get_allocator(self)
    def begin(self): return _streamanalyzer.RegisteredFieldVector_begin(self)
    def end(self): return _streamanalyzer.RegisteredFieldVector_end(self)
    def rbegin(self): return _streamanalyzer.RegisteredFieldVector_rbegin(self)
    def rend(self): return _streamanalyzer.RegisteredFieldVector_rend(self)
    def pop_back(self): return _streamanalyzer.RegisteredFieldVector_pop_back(self)
    def erase(self, *args): return _streamanalyzer.RegisteredFieldVector_erase(self, *args)
    def __init__(self, *args): 
        this = _streamanalyzer.new_RegisteredFieldVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _streamanalyzer.RegisteredFieldVector_push_back(self, *args)
    def front(self): return _streamanalyzer.RegisteredFieldVector_front(self)
    def back(self): return _streamanalyzer.RegisteredFieldVector_back(self)
    def assign(self, *args): return _streamanalyzer.RegisteredFieldVector_assign(self, *args)
    def resize(self, *args): return _streamanalyzer.RegisteredFieldVector_resize(self, *args)
    def insert(self, *args): return _streamanalyzer.RegisteredFieldVector_insert(self, *args)
    def reserve(self, *args): return _streamanalyzer.RegisteredFieldVector_reserve(self, *args)
    def capacity(self): return _streamanalyzer.RegisteredFieldVector_capacity(self)
    __swig_destroy__ = _streamanalyzer.delete_RegisteredFieldVector
    __del__ = lambda self : None;
RegisteredFieldVector_swigregister = _streamanalyzer.RegisteredFieldVector_swigregister
RegisteredFieldVector_swigregister(RegisteredFieldVector)

class StreamAnalyzer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAnalyzer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _streamanalyzer.new_StreamAnalyzer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamAnalyzer
    __del__ = lambda self : None;
    def setIndexWriter(self, *args): return _streamanalyzer.StreamAnalyzer_setIndexWriter(self, *args)
StreamAnalyzer_swigregister = _streamanalyzer.StreamAnalyzer_swigregister
StreamAnalyzer_swigregister(StreamAnalyzer)

class StreamAnalyzerFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAnalyzerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamAnalyzerFactory
    __del__ = lambda self : None;
    def name(self): return _streamanalyzer.StreamAnalyzerFactory_name(self)
    def registerFields(self, *args): return _streamanalyzer.StreamAnalyzerFactory_registerFields(self, *args)
    def addField(self, *args): return _streamanalyzer.StreamAnalyzerFactory_addField(self, *args)
    def registeredFields(self): return _streamanalyzer.StreamAnalyzerFactory_registeredFields(self)
StreamAnalyzerFactory_swigregister = _streamanalyzer.StreamAnalyzerFactory_swigregister
StreamAnalyzerFactory_swigregister(StreamAnalyzerFactory)

class StreamEndAnalyzer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamEndAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamEndAnalyzer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamEndAnalyzer
    __del__ = lambda self : None;
    def checkHeader(self, *args): return _streamanalyzer.StreamEndAnalyzer_checkHeader(self, *args)
    def analyze(self, *args): return _streamanalyzer.StreamEndAnalyzer_analyze(self, *args)
    def error(self): return _streamanalyzer.StreamEndAnalyzer_error(self)
    def name(self): return _streamanalyzer.StreamEndAnalyzer_name(self)
    def __init__(self): 
        if self.__class__ == StreamEndAnalyzer:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamEndAnalyzer(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamEndAnalyzer(self)
        return weakref_proxy(self)
StreamEndAnalyzer_swigregister = _streamanalyzer.StreamEndAnalyzer_swigregister
StreamEndAnalyzer_swigregister(StreamEndAnalyzer)

class StreamEndAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamEndAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamEndAnalyzerFactory, name)
    __repr__ = _swig_repr
    def newInstance(self): return _streamanalyzer.StreamEndAnalyzerFactory_newInstance(self)
    def __init__(self): 
        if self.__class__ == StreamEndAnalyzerFactory:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamEndAnalyzerFactory(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamEndAnalyzerFactory
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamEndAnalyzerFactory(self)
        return weakref_proxy(self)
StreamEndAnalyzerFactory_swigregister = _streamanalyzer.StreamEndAnalyzerFactory_swigregister
StreamEndAnalyzerFactory_swigregister(StreamEndAnalyzerFactory)

class StreamEventAnalyzer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamEventAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamEventAnalyzer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamEventAnalyzer
    __del__ = lambda self : None;
    def name(self): return _streamanalyzer.StreamEventAnalyzer_name(self)
    def startAnalysis(self, *args): return _streamanalyzer.StreamEventAnalyzer_startAnalysis(self, *args)
    def endAnalysis(self, *args): return _streamanalyzer.StreamEventAnalyzer_endAnalysis(self, *args)
    def handleData(self, *args): return _streamanalyzer.StreamEventAnalyzer_handleData(self, *args)
    def isReadyWithStream(self): return _streamanalyzer.StreamEventAnalyzer_isReadyWithStream(self)
    def __init__(self): 
        if self.__class__ == StreamEventAnalyzer:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamEventAnalyzer(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamEventAnalyzer(self)
        return weakref_proxy(self)
StreamEventAnalyzer_swigregister = _streamanalyzer.StreamEventAnalyzer_swigregister
StreamEventAnalyzer_swigregister(StreamEventAnalyzer)

class StreamEventAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamEventAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamEventAnalyzerFactory, name)
    __repr__ = _swig_repr
    def newInstance(self): return _streamanalyzer.StreamEventAnalyzerFactory_newInstance(self)
    def __init__(self): 
        if self.__class__ == StreamEventAnalyzerFactory:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamEventAnalyzerFactory(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamEventAnalyzerFactory
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamEventAnalyzerFactory(self)
        return weakref_proxy(self)
StreamEventAnalyzerFactory_swigregister = _streamanalyzer.StreamEventAnalyzerFactory_swigregister
StreamEventAnalyzerFactory_swigregister(StreamEventAnalyzerFactory)

class StreamLineAnalyzer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamLineAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamLineAnalyzer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamLineAnalyzer
    __del__ = lambda self : None;
    def name(self): return _streamanalyzer.StreamLineAnalyzer_name(self)
    def startAnalysis(self, *args): return _streamanalyzer.StreamLineAnalyzer_startAnalysis(self, *args)
    def endAnalysis(self, *args): return _streamanalyzer.StreamLineAnalyzer_endAnalysis(self, *args)
    def handleLine(self, *args): return _streamanalyzer.StreamLineAnalyzer_handleLine(self, *args)
    def isReadyWithStream(self): return _streamanalyzer.StreamLineAnalyzer_isReadyWithStream(self)
    def __init__(self): 
        if self.__class__ == StreamLineAnalyzer:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamLineAnalyzer(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamLineAnalyzer(self)
        return weakref_proxy(self)
StreamLineAnalyzer_swigregister = _streamanalyzer.StreamLineAnalyzer_swigregister
StreamLineAnalyzer_swigregister(StreamLineAnalyzer)

class StreamLineAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamLineAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamLineAnalyzerFactory, name)
    __repr__ = _swig_repr
    def newInstance(self): return _streamanalyzer.StreamLineAnalyzerFactory_newInstance(self)
    def __init__(self): 
        if self.__class__ == StreamLineAnalyzerFactory:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamLineAnalyzerFactory(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamLineAnalyzerFactory
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamLineAnalyzerFactory(self)
        return weakref_proxy(self)
StreamLineAnalyzerFactory_swigregister = _streamanalyzer.StreamLineAnalyzerFactory_swigregister
StreamLineAnalyzerFactory_swigregister(StreamLineAnalyzerFactory)

class StreamSaxAnalyzer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamSaxAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamSaxAnalyzer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == StreamSaxAnalyzer:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamSaxAnalyzer(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamSaxAnalyzer
    __del__ = lambda self : None;
    def name(self): return _streamanalyzer.StreamSaxAnalyzer_name(self)
    def startAnalysis(self, *args): return _streamanalyzer.StreamSaxAnalyzer_startAnalysis(self, *args)
    def endAnalysis(self, *args): return _streamanalyzer.StreamSaxAnalyzer_endAnalysis(self, *args)
    def startElement(self, *args): return _streamanalyzer.StreamSaxAnalyzer_startElement(self, *args)
    def endElement(self, *args): return _streamanalyzer.StreamSaxAnalyzer_endElement(self, *args)
    def characters(self, *args): return _streamanalyzer.StreamSaxAnalyzer_characters(self, *args)
    def isReadyWithStream(self): return _streamanalyzer.StreamSaxAnalyzer_isReadyWithStream(self)
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamSaxAnalyzer(self)
        return weakref_proxy(self)
StreamSaxAnalyzer_swigregister = _streamanalyzer.StreamSaxAnalyzer_swigregister
StreamSaxAnalyzer_swigregister(StreamSaxAnalyzer)

class StreamSaxAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamSaxAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamSaxAnalyzerFactory, name)
    __repr__ = _swig_repr
    def newInstance(self): return _streamanalyzer.StreamSaxAnalyzerFactory_newInstance(self)
    def __init__(self): 
        if self.__class__ == StreamSaxAnalyzerFactory:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamSaxAnalyzerFactory(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamSaxAnalyzerFactory
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamSaxAnalyzerFactory(self)
        return weakref_proxy(self)
StreamSaxAnalyzerFactory_swigregister = _streamanalyzer.StreamSaxAnalyzerFactory_swigregister
StreamSaxAnalyzerFactory_swigregister(StreamSaxAnalyzerFactory)

class StreamThroughAnalyzer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamThroughAnalyzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamThroughAnalyzer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_StreamThroughAnalyzer
    __del__ = lambda self : None;
    def setIndexable(self, *args): return _streamanalyzer.StreamThroughAnalyzer_setIndexable(self, *args)
    def connectInputStream(self, *args): return _streamanalyzer.StreamThroughAnalyzer_connectInputStream(self, *args)
    def isReadyWithStream(self): return _streamanalyzer.StreamThroughAnalyzer_isReadyWithStream(self)
    def name(self): return _streamanalyzer.StreamThroughAnalyzer_name(self)
    def __init__(self): 
        if self.__class__ == StreamThroughAnalyzer:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamThroughAnalyzer(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamThroughAnalyzer(self)
        return weakref_proxy(self)
StreamThroughAnalyzer_swigregister = _streamanalyzer.StreamThroughAnalyzer_swigregister
StreamThroughAnalyzer_swigregister(StreamThroughAnalyzer)

class StreamThroughAnalyzerFactory(StreamAnalyzerFactory):
    __swig_setmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamThroughAnalyzerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamAnalyzerFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamThroughAnalyzerFactory, name)
    __repr__ = _swig_repr
    def newInstance(self): return _streamanalyzer.StreamThroughAnalyzerFactory_newInstance(self)
    def __init__(self): 
        if self.__class__ == StreamThroughAnalyzerFactory:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_StreamThroughAnalyzerFactory(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_StreamThroughAnalyzerFactory
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_StreamThroughAnalyzerFactory(self)
        return weakref_proxy(self)
StreamThroughAnalyzerFactory_swigregister = _streamanalyzer.StreamThroughAnalyzerFactory_swigregister
StreamThroughAnalyzerFactory_swigregister(StreamThroughAnalyzerFactory)

class AnalysisResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisResult, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _streamanalyzer.delete_AnalysisResult
    __del__ = lambda self : None;
    def index(self, *args): return _streamanalyzer.AnalysisResult_index(self, *args)
    def child(self): return _streamanalyzer.AnalysisResult_child(self)
    def addValue(self, *args): return _streamanalyzer.AnalysisResult_addValue(self, *args)
    def addTriplet(self, *args): return _streamanalyzer.AnalysisResult_addTriplet(self, *args)
    def newAnonymousUri(self): return _streamanalyzer.AnalysisResult_newAnonymousUri(self)
    def fileName(self): return _streamanalyzer.AnalysisResult_fileName(self)
    def path(self): return _streamanalyzer.AnalysisResult_path(self)
    def parentPath(self): return _streamanalyzer.AnalysisResult_parentPath(self)
    def mTime(self): return _streamanalyzer.AnalysisResult_mTime(self)
    def depth(self): return _streamanalyzer.AnalysisResult_depth(self)
    def setEncoding(self, *args): return _streamanalyzer.AnalysisResult_setEncoding(self, *args)
    def encoding(self): return _streamanalyzer.AnalysisResult_encoding(self)
    def setMimeType(self, *args): return _streamanalyzer.AnalysisResult_setMimeType(self, *args)
    def mimeType(self): return _streamanalyzer.AnalysisResult_mimeType(self)
    def extension(self): return _streamanalyzer.AnalysisResult_extension(self)
    def __init__(self, *args): 
        this = _streamanalyzer.new_AnalysisResult(*args)
        try: self.this.append(this)
        except: self.this = this
    def addText(self, *args): return _streamanalyzer.AnalysisResult_addText(self, *args)
AnalysisResult_swigregister = _streamanalyzer.AnalysisResult_swigregister
AnalysisResult_swigregister(AnalysisResult)

class AnalyzerConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyzerConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyzerConfiguration, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == AnalyzerConfiguration:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_AnalyzerConfiguration(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_AnalyzerConfiguration
    __del__ = lambda self : None;
    def indexFile(self, *args): return _streamanalyzer.AnalyzerConfiguration_indexFile(self, *args)
    def indexDir(self, *args): return _streamanalyzer.AnalyzerConfiguration_indexDir(self, *args)
    def useFactory(self, *args): return _streamanalyzer.AnalyzerConfiguration_useFactory(self, *args)
    def indexMore(self): return _streamanalyzer.AnalyzerConfiguration_indexMore(self)
    def indexArchiveContents(self): return _streamanalyzer.AnalyzerConfiguration_indexArchiveContents(self)
    def addMoreText(self): return _streamanalyzer.AnalyzerConfiguration_addMoreText(self)
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_AnalyzerConfiguration(self)
        return weakref_proxy(self)
AnalyzerConfiguration_swigregister = _streamanalyzer.AnalyzerConfiguration_swigregister
AnalyzerConfiguration_swigregister(AnalyzerConfiguration)

class IndexWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexWriter, name)
    __repr__ = _swig_repr
    def startAnalysis(self, *args): return _streamanalyzer.IndexWriter_startAnalysis(self, *args)
    def finishAnalysis(self, *args): return _streamanalyzer.IndexWriter_finishAnalysis(self, *args)
    def addTriplet(self, *args): return _streamanalyzer.IndexWriter_addTriplet(self, *args)
    def addText(self, *args): return _streamanalyzer.IndexWriter_addText(self, *args)
    def addValue(self, *args): return _streamanalyzer.IndexWriter_addValue(self, *args)
    __swig_destroy__ = _streamanalyzer.delete_IndexWriter
    __del__ = lambda self : None;
    def dataHandlerfinishAnalysis(self, result):
      self._finishAnalysis(result)
      if 'datas' in self.__dict__ and result.path() in self.datas: del self.datas[result.path()]
    def getData(self, result):
      if 'datas' in self.__dict__ and result.path() in self.datas: return self.datas[result.path()]
      else: return None
    def setData(self, result, value):
      if not 'datas' in self.__dict__: self.datas = {}
      self.datas[result.path()] = value
    def commit(self): pass

    def __init__(self): 
        if self.__class__ == IndexWriter:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_IndexWriter(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_IndexWriter(self)
        return weakref_proxy(self)
IndexWriter_swigregister = _streamanalyzer.IndexWriter_swigregister
IndexWriter_swigregister(IndexWriter)

class PythonIndexManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonIndexManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PythonIndexManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == PythonIndexManager:
            _self = None
        else:
            _self = self
        this = _streamanalyzer.new_PythonIndexManager(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamanalyzer.delete_PythonIndexManager
    __del__ = lambda self : None;
    def pythonIndexWriter(self): return _streamanalyzer.PythonIndexManager_pythonIndexWriter(self)
    __swig_getmethods__["addFactory"] = lambda x: _streamanalyzer.PythonIndexManager_addFactory
    if _newclass:addFactory = staticmethod(_streamanalyzer.PythonIndexManager_addFactory)
    __swig_getmethods__["clearFactories"] = lambda x: _streamanalyzer.PythonIndexManager_clearFactories
    if _newclass:clearFactories = staticmethod(_streamanalyzer.PythonIndexManager_clearFactories)
    def __disown__(self):
        self.this.disown()
        _streamanalyzer.disown_PythonIndexManager(self)
        return weakref_proxy(self)
PythonIndexManager_swigregister = _streamanalyzer.PythonIndexManager_swigregister
PythonIndexManager_swigregister(PythonIndexManager)

def PythonIndexManager_addFactory(*args):
  return _streamanalyzer.PythonIndexManager_addFactory(*args)
PythonIndexManager_addFactory = _streamanalyzer.PythonIndexManager_addFactory

def PythonIndexManager_clearFactories():
  return _streamanalyzer.PythonIndexManager_clearFactories()
PythonIndexManager_clearFactories = _streamanalyzer.PythonIndexManager_clearFactories

import threading
import os

class IndexManager(PythonIndexManager):
  def __init__(self):
    super(IndexManager, self).__init__()
    self.tls = threading.local()
  
  """ Returns an IndexWriter. Note that there are multiple IndexWriters depending on the thread which is requesting it"""
  def indexWriter(self):
    return self.pythonIndexWriter()

  """ Since IndexWriters are not thread safe, we keep and return a thread specific IndexWriter"""
  def pythonIndexWriter(self):
    if not 'writer' in self.tls.__dict__:
      self.tls.writer = self.createIndexWriter()
    return self.tls.writer
    
  """ Adds a Analyzer Factory to the indexer. Note that this is global because Strigi does not provide any other way"""
  @staticmethod
  def addFactory(factory):
    #TODO: need to find a better way of doing this!
    if not 'STRIGI_PLUGIN_PATH' in os.environ:
      os.environ['STRIGI_PLUGIN_PATH'] = os.path.dirname(__file__)
    IndexManager.factories.append(factory)
    PythonIndexManager.addFactory(factory)
  """ Clears all the custom factories """
  @staticmethod
  def clearFactories():
    del IndexManager.factories[:]
    PythonIndexManager.clearFactories()
  factories = []

#add data cleanup to finishAnalysis
def IndexWriterDataHandlerfinishAnalysis(self, result):
  self._finishAnalysis(result)
  if 'datas' in self.__dict__ and result.path() in self.datas: del self.datas[result.path()]
IndexWriter._finishAnalysis = IndexWriter.finishAnalysis
IndexWriter.finishAnalysis = IndexWriterDataHandlerfinishAnalysis

class DirAnalyzer():
  def __init__(self, manager, conf):
    self.manager = manager
    self.conf = conf
    self.writer = manager.indexWriter()
    self.analyzer = StreamAnalyzer(self.conf);
    self.analyzer.setIndexWriter(self.writer);
    self.running = False
  def __del__(self): self.analyzer = None
  def stop(self):
    self.running = False
  
  def analyzeFile(self, path):
    if os.path.exists(path):
      mtime = os.path.getmtime(path)
      exists = True
    else:
      mtime = 0
      exists = False

    result = AnalysisResult(path, int(mtime), self.writer, self.analyzer, "")
    if exists and os.path.isfile(path):
      stream = InputStream.openFile(path)
      result.index(stream)
      stream = None
    else:
      result.index(None)

  def _analyze(self):
      pass
      
  def analyzeDir(self, dir):
    self.running = True
    dir = os.path.abspath(dir)

    # if the path does not point to a directory, return
    if not os.path.exists(dir) or not os.path.isdir(dir):
      self.analyzeFile(dir)
      self.writer.commit()
      return

    for root, subFolders, files in os.walk(dir):
      self.analyzeFile(root)

      for file in files:
        if self.conf.indexFile(root, file):
          self.analyzeFile(os.path.join(root, file))

      #commit after each directory
      self.writer.commit()
      if not self.running: break
      
      #remove subFolders that we don't want to index
      remove = []
      for subFolder in subFolders:
        if not self.conf.indexDir(root, subFolder): remove.append(subFolder)
      for r in remove:
        subFolders.remove(r)



#factories need to keep instances of the analyzers they create, add replacements in here... 
def StreamEndAnalyzerFactoryNewInstance(self):
  if not '_instances' in self.__dict__: self._instances = []
  ret = self._newInstance()
  self._instances.append(ret)
  return ret
def StreamEndAnalyzerFactoryInit(self):
  StreamEndAnalyzerFactory.__initOrig__(self)
  if not '_newInstance' in self.__class__.__dict__:
    #replace the newInstance function
    self.__class__._newInstance = self.__class__.newInstance
    self.__class__.newInstance =  StreamEndAnalyzerFactoryNewInstance
#replace the init
StreamEndAnalyzerFactory.__initOrig__ = StreamEndAnalyzerFactory.__init__
StreamEndAnalyzerFactory.__init__ = StreamEndAnalyzerFactoryInit 

def StreamThroughAnalyzerFactoryNewInstance(self):
  if not '_instances' in self.__dict__: self._instances = []
  ret = self._newInstance()
  self._instances.append(ret)
  return ret
def StreamThroughAnalyzerFactoryInit(self):
  StreamThroughAnalyzerFactory.__initOrig__(self)
  if not '_newInstance' in self.__class__.__dict__:
    #replace the newInstance function
    self.__class__._newInstance = self.__class__.newInstance
    self.__class__.newInstance =  StreamThroughAnalyzerFactoryNewInstance
#replace the init
StreamThroughAnalyzerFactory.__initOrig__ = StreamThroughAnalyzerFactory.__init__
StreamThroughAnalyzerFactory.__init__ = StreamThroughAnalyzerFactoryInit 

def StreamSaxAnalyzerFactoryNewInstance(self):
  if not '_instances' in self.__dict__: self._instances = []
  ret = self._newInstance()
  self._instances.append(ret)
  return ret
def StreamSaxAnalyzerFactoryInit(self):
  StreamSaxAnalyzerFactory.__initOrig__(self)
  if not '_newInstance' in self.__class__.__dict__:
    #replace the newInstance function
    self.__class__._newInstance = self.__class__.newInstance
    self.__class__.newInstance =  StreamSaxAnalyzerFactoryNewInstance
#replace the init
StreamSaxAnalyzerFactory.__initOrig__ = StreamSaxAnalyzerFactory.__init__
StreamSaxAnalyzerFactory.__init__ = StreamSaxAnalyzerFactoryInit 

def StreamEventAnalyzerFactoryNewInstance(self):
  if not '_instances' in self.__dict__: self._instances = []
  ret = self._newInstance()
  self._instances.append(ret)
  return ret
def StreamEventAnalyzerFactoryInit(self):
  StreamEventAnalyzerFactory.__initOrig__(self)
  if not '_newInstance' in self.__class__.__dict__:
    #replace the newInstance function
    self.__class__._newInstance = self.__class__.newInstance
    self.__class__.newInstance =  StreamEventAnalyzerFactoryNewInstance
#replace the init
StreamEventAnalyzerFactory.__initOrig__ = StreamEventAnalyzerFactory.__init__
StreamEventAnalyzerFactory.__init__ = StreamEventAnalyzerFactoryInit 

def StreamLineAnalyzerFactoryNewInstance(self):
  if not '_instances' in self.__dict__: self._instances = []
  ret = self._newInstance()
  self._instances.append(ret)
  return ret
def StreamLineAnalyzerFactoryInit(self):
  StreamLineAnalyzerFactory.__initOrig__(self)
  if not '_newInstance' in self.__class__.__dict__:
    #replace the newInstance function
    self.__class__._newInstance = self.__class__.newInstance
    self.__class__.newInstance =  StreamLineAnalyzerFactoryNewInstance
#replace the init
StreamLineAnalyzerFactory.__initOrig__ = StreamLineAnalyzerFactory.__init__
StreamLineAnalyzerFactory.__init__ = StreamLineAnalyzerFactoryInit 




