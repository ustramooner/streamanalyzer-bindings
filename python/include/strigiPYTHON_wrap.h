/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_streamanalyzer_WRAP_H_
#define SWIG_streamanalyzer_WRAP_H_

#include <map>
#include <string>


class SwigDirector_StreamEndAnalyzer : public Strigi::StreamEndAnalyzer, public Swig::Director {

public:
    SwigDirector_StreamEndAnalyzer(PyObject *self);
    virtual ~SwigDirector_StreamEndAnalyzer();
    virtual bool checkHeader(char const *header, int32_t headersize) const;
    virtual signed char analyze(Strigi::AnalysisResult &idx, Strigi::InputStream *in);
    virtual char const *name() const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamEndAnalyzer doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_StreamEndAnalyzerFactory : public Strigi::StreamEndAnalyzerFactory, public Swig::Director {

public:
    SwigDirector_StreamEndAnalyzerFactory(PyObject *self);
    virtual ~SwigDirector_StreamEndAnalyzerFactory();
    virtual char const *name() const;
    virtual void registerFields(Strigi::FieldRegister &arg0);
    virtual Strigi::StreamEndAnalyzer *newInstance() const;
    virtual bool analyzesSubStreams() const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamEndAnalyzerFactory doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_StreamEventAnalyzer : public Strigi::StreamEventAnalyzer, public Swig::Director {

public:
    SwigDirector_StreamEventAnalyzer(PyObject *self);
    virtual ~SwigDirector_StreamEventAnalyzer();
    virtual char const *name() const;
    virtual void startAnalysis(Strigi::AnalysisResult *arg0);
    virtual void endAnalysis(bool complete);
    virtual void handleData(char const *data, uint32_t length);
    virtual bool isReadyWithStream();


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamEventAnalyzer doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[5];
#endif

};


class SwigDirector_StreamEventAnalyzerFactory : public Strigi::StreamEventAnalyzerFactory, public Swig::Director {

public:
    SwigDirector_StreamEventAnalyzerFactory(PyObject *self);
    virtual ~SwigDirector_StreamEventAnalyzerFactory();
    virtual char const *name() const;
    virtual void registerFields(Strigi::FieldRegister &arg0);
    virtual Strigi::StreamEventAnalyzer *newInstance() const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamEventAnalyzerFactory doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_StreamLineAnalyzer : public Strigi::StreamLineAnalyzer, public Swig::Director {

public:
    SwigDirector_StreamLineAnalyzer(PyObject *self);
    virtual ~SwigDirector_StreamLineAnalyzer();
    virtual char const *name() const;
    virtual void startAnalysis(Strigi::AnalysisResult *result);
    virtual void endAnalysis(bool complete);
    virtual void handleLine(char const *data, uint32_t length);
    virtual bool isReadyWithStream();


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamLineAnalyzer doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[5];
#endif

};


class SwigDirector_StreamLineAnalyzerFactory : public Strigi::StreamLineAnalyzerFactory, public Swig::Director {

public:
    SwigDirector_StreamLineAnalyzerFactory(PyObject *self);
    virtual ~SwigDirector_StreamLineAnalyzerFactory();
    virtual char const *name() const;
    virtual void registerFields(Strigi::FieldRegister &arg0);
    virtual Strigi::StreamLineAnalyzer *newInstance() const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamLineAnalyzerFactory doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_StreamSaxAnalyzer : public Strigi::StreamSaxAnalyzer, public Swig::Director {

public:
    SwigDirector_StreamSaxAnalyzer(PyObject *self);
    virtual ~SwigDirector_StreamSaxAnalyzer();
    virtual char const *name() const;
    virtual void startAnalysis(Strigi::AnalysisResult *arg0);
    virtual void endAnalysis(bool complete);
    virtual void startElement(char const *localname, char const *prefix, char const *uri, int nb_namespaces, char const **namespaces, int nb_attributes, int nb_defaulted, char const **attributes);
    virtual void endElement(char const *localname, char const *prefix, char const *uri);
    virtual void characters(char const *data, uint32_t length);
    virtual bool isReadyWithStream();


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamSaxAnalyzer doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[7];
#endif

};


class SwigDirector_StreamSaxAnalyzerFactory : public Strigi::StreamSaxAnalyzerFactory, public Swig::Director {

public:
    SwigDirector_StreamSaxAnalyzerFactory(PyObject *self);
    virtual ~SwigDirector_StreamSaxAnalyzerFactory();
    virtual char const *name() const;
    virtual void registerFields(Strigi::FieldRegister &arg0);
    virtual Strigi::StreamSaxAnalyzer *newInstance() const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamSaxAnalyzerFactory doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_StreamThroughAnalyzer : public Strigi::StreamThroughAnalyzer, public Swig::Director {

public:
    SwigDirector_StreamThroughAnalyzer(PyObject *self);
    virtual ~SwigDirector_StreamThroughAnalyzer();
    virtual void setIndexable(Strigi::AnalysisResult *arg0);
    virtual Strigi::InputStream *connectInputStream(Strigi::InputStream *in);
    virtual bool isReadyWithStream();
    virtual char const *name() const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamThroughAnalyzer doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[4];
#endif

};


class SwigDirector_StreamThroughAnalyzerFactory : public Strigi::StreamThroughAnalyzerFactory, public Swig::Director {

public:
    SwigDirector_StreamThroughAnalyzerFactory(PyObject *self);
    virtual ~SwigDirector_StreamThroughAnalyzerFactory();
    virtual char const *name() const;
    virtual void registerFields(Strigi::FieldRegister &arg0);
    virtual Strigi::StreamThroughAnalyzer *newInstance() const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class StreamThroughAnalyzerFactory doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_AnalyzerConfiguration : public Strigi::AnalyzerConfiguration, public Swig::Director {

public:
    SwigDirector_AnalyzerConfiguration(PyObject *self);
    virtual ~SwigDirector_AnalyzerConfiguration();
    virtual bool indexFile(char const *path, char const *filename) const;
    virtual bool indexDir(char const *path, char const *filename) const;
    virtual bool useFactory(Strigi::StreamAnalyzerFactory *arg0) const;
    virtual bool useFactory(Strigi::StreamEndAnalyzerFactory *f) const;
    virtual bool useFactory(Strigi::StreamThroughAnalyzerFactory *f) const;
    virtual bool useFactory(Strigi::StreamSaxAnalyzerFactory *f) const;
    virtual bool useFactory(Strigi::StreamEventAnalyzerFactory *f) const;
    virtual bool useFactory(Strigi::StreamLineAnalyzerFactory *f) const;
    virtual bool indexMore() const;
    virtual bool addMoreText() const;
    virtual int64_t maximalStreamReadLength(Strigi::AnalysisResult const &arg0);
    virtual Strigi::AnalyzerConfiguration::FieldType indexType(Strigi::RegisteredField const *f) const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class AnalyzerConfiguration doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[10];
#endif

};


class SwigDirector_IndexWriter : public PythonIndexWriter, public Swig::Director {

public:
    SwigDirector_IndexWriter(PyObject *self);
    virtual void startAnalysis(Strigi::AnalysisResult const *arg0);
    virtual void finishAnalysis(Strigi::AnalysisResult const *r);
    virtual void addTriplet(std::string const &subject, std::string const &predicate, std::string const &object);
    virtual void addText(Strigi::AnalysisResult const *r, std::string const &text);
    virtual void addValue(Strigi::AnalysisResult const *r, Strigi::RegisteredField const *field, PyObject *value);
    virtual ~SwigDirector_IndexWriter();


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class IndexWriter doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[5];
#endif

};


class SwigDirector_PythonIndexManager : public PythonIndexManager, public Swig::Director {

public:
    SwigDirector_PythonIndexManager(PyObject *self);
    virtual ~SwigDirector_PythonIndexManager();
    virtual PythonIndexWriter *pythonIndexWriter();


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* protected_method_name, bool val) const
    { swig_inner[protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class PythonIndexManager doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


#endif
